# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  pull_request_review:
    types: [submitted]

  # reusable
  workflow_call:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
    - name: Get Repo Name
      run: |
          echo "REPO_NAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV
          echo "ORG_NAME=${${{ github.repository }}##*/}" >> $GITHUB_ENV

    - name: Set up Python 3.8
      uses: actions/setup-python@v5
      with:
        python-version: 3.8

    - name: Download and install repo
      run: |
        mkdir ~/bin
        echo 'export PATH=~/bin:$PATH' >> $HOME/.bashrc
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo
    
    - name: Clean up disk space
      run: |
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /etc/apt/sources.list.d/* /usr/local/lib/android /etc/mysql /etc/php /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo docker builder prune -a
        sudo docker system prune -af
        sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* || true
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install libfuse-dev $(curl -fsSL git.io/depends-ubuntu-2204)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        df -h

    - name: Verify repo installation
      run: |
        ~/bin/repo --version

    - name: Get PR source branch name
      id: get_branch_name
      run: |
        PR_BRANCH=$(jq -r '.pull_request.head.ref' "$GITHUB_EVENT_PATH")
        echo "branch_name=$PR_BRANCH" >> $GITHUB_OUTPUT
  
    - name: Repo Init
      run: |
        ~/bin/repo init -u https://github.com/${{ env.ORG_NAME }}/manifests -b ${{ steps.get_branch_name.outputs.branch_name }} -m openvela.xml --depth=1 --git-lfs
        echo "REPO_INIT=true" >> $GITHUB_ENV

    - name: Repo Sync
      run: |
        df -h
        ~/bin/repo sync -c -d --no-tags -j12
        df -h

    - name: Fetch PR
      if: ${{ github.event_name == 'pull_request_review' }}
      run: |
        echo $(ls -atl)
        if [ ${{ env.REPO_NAME }} == "manifests" ]; then
            cd .repo/manifests
            git fetch openvela pull/${{ github.event.pull_request.number }}/head:pr-branch
            git checkout pr-branch
            cd -
            ~/bin/repo sync -c -d --no-tags -j12
        else
            manifest_content=$(cat .repo/manifests/openvela.xml)
            echo $manifest_content
            REPO_PATH=$(cat .repo/manifests/openvela.xml | grep "\"${{ env.REPO_NAME }}\"" | awk -F'"' '{print $2}')
            echo $REPO_PATH
            cd $REPO_PATH
            git fetch openvela pull/${{ github.event.pull_request.number }}/head:pr-branch git checkout pr-branch
            cd -
        fi

    - name: Docker Login                                                                                                                                                                                                 
      uses: docker/login-action@v3                                                                                                                                                                                       
      with:                                                                                                                                                                                                              
        registry: ghcr.io                                                                                                                                                                                                
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
